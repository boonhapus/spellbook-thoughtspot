[build-system]
requires = ["setuptools>=42", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "spellbook-thoughtspot"
dynamic = ["version"]
description = "Lorem ipsum."
readme = "README.md"
requires-python = ">= 3.12"
license = {file = "LICENSE"}
authors = [
	{name = "boonhapus", email="nicholas.cooper@thoughtspot.com"},
]
maintainers = [
    {name = "boonhapus", email="nicholas.cooper@thoughtspot.com"},
]
classifiers = [
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "httpx",
    "python-fasthtml",
    "pydantic",
    "rich",
]

[project.optional-dependencies]
dev = [
    # Code Quality
    "pre-commit",
    "taskipy",
    "ruff",
    "mypy",
    "vulture",

    # Testing
    "nox",
    "pytest",
    "coverage[toml]",
]

[tool.setuptools.dynamic]
version = {attr = "spellbook.__project__.__version__"}

[tool.mypy]
plugins = [
    "pydantic.mypy"
]
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
strict_equality = true
strict_concatenate = true

[tool.ruff]
line-length = 120
src = ["src/spellbook"]
exclude = [
    "__pycache__",   # ignore compiled bytecode
    ".venv*",        # ignore virtual environments
    ".nox",          # ignore virtual environments

    # project specific ignores
    "__init__.py",       # ignore __init__.py
    "__project__.py",    # ignore project metadata
]

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins: https://pypi.org/project/flake8-builtins/
    "ARG",   # flake8-unused-arguments: https://pypi.org/project/flake8-unused-arguments/
    "B",     # flake8-bugbear: https://pypi.org/project/flake8-bugbear/
    "C4",    # flake8-comprehensions: https://pypi.org/project/flake8-comprehensions/
    "COM",   # flake8-commas: https://pypi.org/project/flake8-commas/
    "DTZ",   # flake8-datetimez: https://pypi.org/project/flake8-datetimez/
    "E",     # pycodestyle: https://pypi.org/project/pycodestyle/
    "F",     # pyflakes: https://pypi.org/project/pyflakes/
    "FA",    # flake8-future-annotations: https://pypi.org/project/flake8-future-annotations/
    "I",     # isort: https://pypi.org/project/isort/
    "Q",     # flake8-quotes: https://pypi.org/project/flake8-quotes/
    "RUF",   # ruff-specific: https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf
    "T20",   # flake8-print: https://pypi.org/project/flake8-print/
    "TCH",   # flake8-type-checking: https://pypi.org/project/flake8-type-checking/
]
ignore = [
    "B008",    # Checks for function calls in default function arguments.
    "COM812",  # Checks for the absence of trailing commas.
    "TCH001",  # Moves imports into the TYPE_CHECKING block, hurting Pydantic, SQLModel
    "TCH002",  # Moves imports into the TYPE_CHECKING block, hurting Pydantic, SQLModel
    "TCH003",  # Moves imports into the TYPE_CHECKING block, hurting Pydantic, SQLModel
]

[tool.ruff.lint.flake8-import-conventions.aliases]
# Declare the default aliases.
datetime = "dt"
sqlalchemy = "sa"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
    "typer.params.Option",
    "typer.params.Argument",
    "pydantic.BaseModel",
    "pydantic_settings.BaseSettings",
    "sqlalchemy.orm.DeclarativeBase",
    "sqlmodel.SQLModel",
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
from-first = true
required-imports = ["from __future__ import annotations"]
